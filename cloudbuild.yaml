# Timeout for complete build. Default is 10m.
timeout: 10800s

############################################################################
# BUILD ARTIFACTS
############################################################################

steps:
# Fetch all submodules.
- name: gcr.io/cloud-builders/git
  args: [
    'submodule', 'update', '--init', '--recursive'
  ]

# Create the image builder for later steps.
- name: gcr.io/cloud-builders/docker
  args: [
    'build', '-t', 'epoxy-images-builder', '.'
  ]

# stage1 ROMs.
- name: epoxy-images-builder
  args: [
    '/workspace/builder.sh', 'stage1_mlxrom'
  ]
  env:
   - 'PROJECT=$PROJECT_ID'  # One of: mlab-sandbox, mlab-staging, or mlab-oti.
   - 'ARTIFACTS=/workspace/output'
   - 'MLXROM_VERSION=3.4.816'
   - 'REGEXP_mlab_sandbox=mlab[1-4].[a-z]{3}[0-9]t.*'
   - 'REGEXP_mlab_staging=mlab4.[a-z]{3}[0-9]{2}.*'
   - 'REGEXP_mlab_oti=mlab[1-3].[a-z]{3}[0-9]{2}.*'

# stage2 kernel.
#
# TODO: retire stage2 kernel in favor of stage1 minimal. We must keep it
# temporarily because it builds the epoxy_client embedded in other images
# below.
- name: epoxy-images-builder
  args: [
    '/workspace/builder.sh', 'stage2'
  ]
  env:
   - 'PROJECT=$PROJECT_ID'
   - 'ARTIFACTS=/workspace/output'

# stage1 minimal kernel & initram using stock ubuntu kernel.
- name: epoxy-images-builder
  args: [
    '/workspace/builder.sh', 'stage1_minimal'
  ]
  env:
   - 'PROJECT=$PROJECT_ID'
   - 'ARTIFACTS=/workspace/output'

# stage1 bootstrapfs for PlanetLab updates.
# NOTE: this must run after stage2 so that the epoxy_client is available.
- name: epoxy-images-builder
  args: [
    '/workspace/builder.sh', 'stage1_bootstrapfs'
  ]
  env:
   - 'PROJECT=$PROJECT_ID'
   - 'ARTIFACTS=/workspace/output'

# stage1 ISOs
# NOTE: must run after stage1_minimal so that kernel & initram are available.
- name: epoxy-images-builder
  args: [
    '/workspace/builder.sh', 'stage1_isos'
  ]
  env:
   - 'PROJECT=$PROJECT_ID'
   - 'ARTIFACTS=/workspace/output'
   - 'REGEXP_mlab_sandbox=mlab[1-4].[a-z]{3}[0-9]t.*'
   - 'REGEXP_mlab_staging=mlab4.[a-z]{3}[0-9]{2}.*'
   - 'REGEXP_mlab_oti=mlab[1-3].[a-z]{3}[0-9]{2}.*'

# stage1 USBs
# NOTE: must run after stage1_minimal so that kernel & initram are available.
- name: epoxy-images-builder
  args: [
    '/workspace/builder.sh', 'stage1_usbs'
  ]
  env:
   - 'PROJECT=$PROJECT_ID'
   - 'ARTIFACTS=/workspace/output'
   - 'REGEXP_mlab_sandbox=mlab[1-4].lga1t.*'
   - 'REGEXP_mlab_staging=mlab4.hnd01.*'
   - 'REGEXP_mlab_oti=mlab[1-3].hnd01.*'

# stage3_coreos images.
- name: epoxy-images-builder
  args: [
    '/workspace/builder.sh', 'stage3_coreos'
  ]
  env:
   - 'PROJECT=$PROJECT_ID'
   - 'ARTIFACTS=/workspace/output'
   - 'COREOS_VERSION=2079.6.0'
   - 'K8S_VERSION=v1.13.5'
   - 'CRI_VERSION=v1.13.0'
   - 'CNI_VERSION=v0.7.5'

# stage3_mlxupdate images.
# NOTE: all project cloudbuild service accounts must be granted READ access to
# the vendor-mlab-oti bucket.
- name: gcr.io/cloud-builders/gsutil
  args: [
    'cp', 'gs://vendor-mlab-oti/epoxy-images/mft-4.4.0-44.tgz', '/workspace/vendor'
  ]
- name: epoxy-images-builder
  args: [
    '/workspace/builder.sh', 'stage3_mlxupdate'
  ]
  env:
   - 'PROJECT=$PROJECT_ID'
   - 'ARTIFACTS=/workspace/output'

############################################################################
# DEPLOY ARTIFACTS
#
# Note: the artifacts built above need to be copied to specific locations in
# the target bucket. Currently, the cloudbuilder 'artifacts' directive does
# not support multiple target locations. So, the steps below are explicit.
############################################################################

# stage1_mlxrom.
- name: gcr.io/cloud-builders/gsutil
  args: [
    '-h', 'Cache-Control:private, max-age=0, no-transform', '-m',
    'cp', '-r', '/workspace/output/stage1_mlxrom/*',
    'gs://epoxy-$PROJECT_ID/stage1_mlxrom/'
  ]

# Deploy stage1_mlxrom images again to the 'latest' directory (without version).
- name: gcr.io/cloud-builders/gsutil
  # NOTE: use bash as the entry point to take advantage of bash file globbing.
  entrypoint: bash
  args:
   - -c
   - >
     gsutil -h "Cache-Control:private, max-age=0, no-transform" -m
     cp -r /workspace/output/stage1_mlxrom/*/*
     gs://epoxy-$PROJECT_ID/stage1_mlxrom/latest/

# stage1_bootstrapfs.
- name: gcr.io/cloud-builders/gsutil
  args: [
    '-h', 'Cache-Control:private, max-age=0, no-transform', '-m',
    'cp', '-r', '/workspace/output/bootstrapfs-MeasurementLabUpdate.tar.bz2*',
    'gs://epoxy-$PROJECT_ID/stage1_bootstrapfs/'
  ]

# stage1_isos.
- name: gcr.io/cloud-builders/gsutil
  args: [
    '-h', 'Cache-Control:private, max-age=0, no-transform', '-m',
    'cp', '-r', '/workspace/output/stage1_isos/*',
    'gs://epoxy-$PROJECT_ID/stage1_isos/'
  ]

# stage1_usbs
- name: gcr.io/cloud-builders/gsutil
  args: [
    '-h', 'Cache-Control:private, max-age=0, no-transform', '-m',
    'cp', '-r', '/workspace/output/stage1_usbs/*',
    'gs://epoxy-$PROJECT_ID/stage1_usbs/'
  ]

# stage3_coreos.
- name: gcr.io/cloud-builders/gsutil
  args: [
    '-h', 'Cache-Control:private, max-age=0, no-transform', '-m',
    'cp', '-r',
    '/workspace/output/stage2_vmlinuz',
    '/workspace/output/vmlinuz_stage1_minimal',
    '/workspace/output/initramfs_stage1_minimal.cpio.gz',
    '/workspace/output/coreos_custom_pxe_image.cpio.gz',
    '/workspace/output/coreos_production_pxe.vmlinuz',
    '/workspace/actions/stage2/stage1to2.ipxe',
    '/workspace/actions/stage3_coreos/*.json',
    'gs://epoxy-$PROJECT_ID/stage3_coreos/'
  ]

# stage3_mlxupdate.
- name: gcr.io/cloud-builders/gsutil
  args: [
    '-h', 'Cache-Control:private, max-age=0, no-transform', '-m',
    'cp', '-r',
    '/workspace/output/stage2_vmlinuz',
    '/workspace/output/vmlinuz_stage1_minimal',
    '/workspace/output/initramfs_stage1_minimal.cpio.gz',
    '/workspace/output/vmlinuz_stage3_mlxupdate',
    '/workspace/output/initramfs_stage3_mlxupdate.cpio.gz',
    '/workspace/actions/stage2/stage1to2.ipxe',
    '/workspace/actions/stage3_mlxupdate/*.json',
    'gs://epoxy-$PROJECT_ID/stage3_mlxupdate/'
  ]
