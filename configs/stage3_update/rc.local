#!/bin/bash


function get_cmdline() {
  local key=$1
  local result=$2
  # Extract the boot parameter ${key}=
  for field in $( cat /proc/cmdline ) ; do
    if [[ "${key}" == "${field%%=*}" ]] ; then
      result=${field##${key}=}
      break
    fi
  done
  echo $result
}

# TODO: epoxyclient should interpret this command line parameter instead.
function setup_network() {
  # Set a default local network configuration.
  ipcfg=192.168.0.2::192.168.0.1:255.255.255.0:default-net:eth0::8.8.8.8:

  ipv4=$( get_cmdline epoxy.ipv4 "192.168.0.2/24,192.168.0.1,8.8.8.8,8.8.4.4" )
  hostname=$( get_cmdline epoxy.hostname "default-net" )
  interface=$( get_cmdline epoxy.interface "eth0" )

  # Note: while using a generic kernel, we must wait for the modules to load
  # automatically before the network configuration commands will work.  This
  # delay could be avoided by explicitly loading the modules here (fragile) or
  # using a custom kernel that embeds the mellanox drivers.
  until ip link show ${interface} 2> /dev/null ; do
      echo "Waiting 1 second for ${interface} to initialize.."
      sleep 1
  done

  echo "Applying network configuration: $ipv4"
  echo $ipv4 | tr ',' ' ' | (
      read addr gateway _
      echo ip address add ${addr} dev ${interface}
      echo ip route add default via ${gateway} dev ${interface}
      echo hostname ${hostname}
      ip address add ${addr} dev ${interface}
      ip link set ${interface} up
      ip route add default via ${gateway} dev ${interface}
      hostname ${hostname}
  )
  ip address show ${interface}
}

echo "Starting mellanox tools."
mst start

echo "Configuring network..."
setup_network

# Note: the stage3 action should be configured in the epoxy server. The nextboot
# config returned should probably run /usr/local/util/updaterom.sh
/usr/bin/epoxy_client -action epoxy.stage3 && reboot
